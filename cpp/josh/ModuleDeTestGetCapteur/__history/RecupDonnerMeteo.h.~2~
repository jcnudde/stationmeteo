//---------------------------------------------------------------------------
/*
 * RecupDonnerMeteo.h
 *
 * Classe qui herite de la class capteur
 *
 * Copyright 7 mars 2019 (@author CNUDDE Joshua)
 * @version 1.0
 *
 *
 **/
#ifndef RecupDonnerMeteoH
#define RecupDonnerMeteoH
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <windows.h>
#include "Anemometre.h"
#include "Girouette.h"
#include "Barometre.h"
#include "CapteurJour_Nuit.h"
#include "CapteurPluie.h"
#include "Pluiviometre.h"
#include "Hygrometre.h"
#include "Solarimetre.h"
#include "Thermometre.h"
#include <vector>

using namespace std;

//structure permettant de gerer tout les capteur
typedef struct
{
    Capteur *anemometre;
    Capteur *girouette;
    Capteur *barometre;
    Capteur *thermometre;
    Capteur *hygrometre;
    Capteur *solarimetre;
    Capteur *capteur_JourNuit;
    Capteur *capteurPluie;
    Capteur *pluviometre;
} tabCapteur;
//structure permettant de gerer toute les données des capteur
typedef struct
{
    double vitesseVent;
    double temperature;
    double pressionAtmospherique;
    double direction;
    double hummiditeRelative;
    double luminosite;
	double jour;      //0 pour nuit et 1 pour jour
    double pluie; //0 pour pas de pluie et 1 pour pluie
    double surfaceDePluie;
}tabDonnerCapteur;


class RecupDonnerMeteo
{
	private:
		HANDLE mutexNotifiers;
		std::vector<DataNotifier *> notifiers;

		//variable meteo
		static RecupDonnerMeteo* m_instance;
		tabCapteur capteur;
		//variable pour le thread
		HANDLE Thread;
		DWORD dwThreadIdArray;
		bool boucleThread;
		//constructeur
		RecupDonnerMeteo();
		//destructeur
		~RecupDonnerMeteo();

		void notifyData(tabDonnerCapteur data);

		void lockNotifier();
		void unlockNotifier();

		static DWORD WINAPI ThreadRecupDonnee(LPVOID params);

	public:
		//renvoie les données météo aquise à l'instant t sous forme d'une structure
		tabDonnerCapteur getDonner();
		//renvoie un seul et même pointeur
		static RecupDonnerMeteo* getInstance();

		void addNotifier(DataNotifier * notifier);
		void removeNotifier(DataNotifier * notifier);
};
//---------------------------------------------------------------------------
#endif
