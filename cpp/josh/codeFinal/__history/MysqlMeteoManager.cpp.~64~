//---------------------------------------------------------------------------

#pragma hdrstop

#include "MysqlMeteoManager.h"
#include <ustring.h>
#include "StringUtils.h"

//---------------------------------------------------------------------------
#pragma package(smart_init)

MysqlMeteoManager* MysqlMeteoManager::m_instance = NULL;
Bdd* MysqlMeteoManager::bdd =NULL;

// constructeur MysqlMeteoManagers
MysqlMeteoManager::MysqlMeteoManager()
{
	this->fichier = new TIniFile("C:\\Program Files (x86)\\GestionMeteo\\Config.ini");
}

// destruction constructeur MysqlMeteoManager
MysqlMeteoManager::~MysqlMeteoManager()
{
}
// instance de la class MysqlMeteoManager
MysqlMeteoManager * MysqlMeteoManager::getInstance()
{
    if(m_instance == NULL)
	{
		m_instance = new MysqlMeteoManager();
		bdd = new Mysql();
		m_instance->connect();

	}
	return m_instance;
}// delete bdd et instancevoid MysqlMeteoManager::stopInstance(){	delete bdd;
	delete m_instance;
	m_instance = NULL;
	bdd = NULL;
}//connexion a la BDDbool MysqlMeteoManager::connect(){	AnsiString ip = this->fichier->ReadString("ConfigurationMysql","ip","192.168.65.66");	AnsiString user = this->fichier->ReadString("ConfigurationMysql","user","admin");	AnsiString password = this->fichier->ReadString("ConfigurationMysql","password","");	AnsiString dbname =  this->fichier->ReadString("ConfigurationMysql","dbname","meteo");	if(bdd->connecte(ip.c_str(),user.c_str(),password.c_str(),dbname.c_str()))
	{
		return true;
	}
	else
	{
		return false;
	}
}// insertion en bddbool MysqlMeteoManager::InsertDonnerCapteur(tabDonnerCapteur donneeMeteo){	 string direction = this->convertDegrPointCard((int)donneeMeteo.direction);	 // requete pour inserer données métèo	String requete = "INSERT INTO `meteo`.`donnees_meteo` (`vitesseVent`, `direction`, `pressionAtmospherique`, `temperature`, `humiditeRelative`, `luminosite`, `pluie`, `jour`, `surfaceDePluie`, `date`) VALUES (";

	requete+=this->convertVirguPoint((int)donneeMeteo.vitesseVent);
	requete+=",";
	requete+=this->convertVirguPoint((int)donneeMeteo.direction);
	requete+=",";
	requete+=this->convertVirguPoint((int)donneeMeteo.pressionAtmospherique);
	requete+=",";
	requete+=this->convertVirguPoint((int)donneeMeteo.temperature);
	requete+=",";
	requete+= String((int)donneeMeteo.hummiditeRelative);
	requete+=",";
	requete+=String((int)donneeMeteo.luminosite);
	requete+=",";
	requete+= String(donneeMeteo.pluie ? 1 : 0);
	requete+=",";
	requete+= String(donneeMeteo.jour ? 1 : 0);
    requete+=",";
	requete+= String(donneeMeteo.surfaceDePluie);
	requete+=",";
	requete+="NOW());";

	char * req = StringUtils::magicConvert(requete.c_str());


	bool res = bdd->insert(req);
    delete req;

	return res;

}// séléctionner les derniéres données en BDDvector<tabDonnerCapteur> MysqlMeteoManager::SelectLastDonnee(){	vector< vector<string> > resultRequete;	vector<tabDonnerCapteur> vectorDonnerCapteur;	string requete = "SELECT`vitesseVent`, `direction`, `pressionAtmospherique`, `temperature`, `humiditeRelative`, `luminosite`, `pluie`, `jour`, `surfaceDePluie` FROM `donnees_meteo` ORDER BY `donnees_meteo`.`date` DESC LIMIT 50";	resultRequete=bdd->select(requete);	string test ;	for (int i = 0; i <resultRequete.size(); i++)	{		tabDonnerCapteur donnerCapteur ;		for (int j = 0; j < resultRequete[i].size(); j++)
		{
			switch(j)
			{
				case 0:
				donnerCapteur.vitesseVent= atof(resultRequete[i][j].c_str());
				test = resultRequete[i][j];
				break;
				case 1:
				donnerCapteur.direction= atof(resultRequete[i][j].c_str());
				break;
				case 2:
				donnerCapteur.pressionAtmospherique= atof(resultRequete[i][j].c_str());
				break;
				case 3:
				donnerCapteur.temperature= atof(resultRequete[i][j].c_str());
				break;
				case 4:
				donnerCapteur.hummiditeRelative= atof(resultRequete[i][j].c_str());
				break;
				case 5:
				donnerCapteur.luminosite= atof(resultRequete[i][j].c_str());
				break;
				case 6:
				donnerCapteur.pluie= atoi(resultRequete[i][j].c_str()) == 1;
				break;
				case 7:
				donnerCapteur.jour= atoi(resultRequete[i][j].c_str()) == 1;
				break;
				case 8:
				donnerCapteur.surfaceDePluie= atoi(resultRequete[i][j].c_str()) == 1;
                break;
			}
		}
		vectorDonnerCapteur.push_back(donnerCapteur);
	}	return vectorDonnerCapteur;}string MysqlMeteoManager::convertDegrPointCard(int degree){    string direction;    switch (degree)	{
		 case 360:
			direction ="N";
			break;
		 case 337:
			direction = "NNO";
			break;
		 case 315:
			direction = "NO";
			break;
		 case 292:
			direction = "ONO";
			break;
		 case 270:
			direction = "O";
			break;
		 case 247:
			direction = "OSO";
			break;
		 case 225:
			direction = "SO";
			break;
		 case 202:
			direction = "SSO";
			break;
		 case 180:
			direction = "S";
			break;
		 case 157:
			direction = "SSE";
			break;
		 case 135:
			direction = "SE";
			break;
		 case 112:
			direction = "ESE";
			break;
		 case 90:
			direction = "E";
			break;
		 case 67:
			direction = "ENE";
			break;
		 case 45:
			direction = "NE";
			break;
		 case 22:
			direction = "NNE";
			break;
	  }	return direction;
}String MysqlMeteoManager::convertVirguPoint(double valeur){	//on convertie en UNICODE String	String val = String(valeur);
	//on convertie en char
	char *vale = StringUtils::magicConvert(val);
	//on recupere l'emplacement de la virgule
	char *valeCouper = strchr(vale,',');
	if(valeCouper != NULL)
	{
		int empl = valeCouper-vale;
		//on change la , en . a l'emplacement
		vale[empl]='.';

		val=vale;
	}

    return val;
}
