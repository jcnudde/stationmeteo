//---------------------------------------------------------------------------

#pragma hdrstop

#include "PrevisionMeteo.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

PrevisionMeteo::PrevisionMeteo()
{
	this->sqlMeteo = MysqlMeteoManager::getInstance();
}
String PrevisionMeteo::previsionMeteo()
{
	String repPrevision;
	vector<tabDonnerCapteur> data = this->sqlMeteo->SelectLastDonnee();
	//variable pour calculer les tendances
	int tendanceAtmospherique=0;
	int tendanceHumidite=0;
	int tendanceTemperature=0;
	int tendanceViteVent=0;
	int previValeurAtmo=0;
	int previValeurHumi=0;
	int previValeurTemp=0;
	int previValeurViteVent=0;
	float moyennePluie=0;
	float moyenneDirection=0;


	int t = data.size();
	for (int i = 1; i < data.size(); i++) {
		//on calcule les tendances Atmosphérique,Humidité, vitesse des vents et Température
		tendanceAtmospherique+=(data[i].pressionAtmospherique-data[i-1].pressionAtmospherique);
		tendanceHumidite+=(data[i].hummiditeRelative-data[i-1].hummiditeRelative);
		tendanceTemperature+=(data[i].temperature-data[i-1].temperature);
		tendanceViteVent+=(data[i].vitesseVent-data[i-1].vitesseVent);
		tendanceLux+=(data[i].luminosite-data[i-1].luminosite);
		//on fait la sommes des pluie et de la direction du vent
		moyennePluie+=data[i].pluie;
		moyenneDirection+=data[i].direction;
	}

	//prevision des valeur avenir pour la Pression Atmosphérique,L'Humidité,
	//la vitesse du vent et la Température
	previValeurAtmo = data[data.size()-1].pressionAtmospherique+tendanceAtmospherique;
	previValeurHumi = data[data.size()-1].hummiditeRelative+tendanceHumidite;
	previValeurTemp = data[data.size()-1].temperature+tendanceTemperature;
	previValeurViteVent = data[data.size()-1].vitesseVent+tendanceViteVent;
	//on calcule la moyenne des pluie et de la direction du vent
	moyennePluie = moyennePluie/(data.size());
	moyenneDirection = moyenneDirection/(data.size());

	if (previValeurAtmo>=1015) {
		repPrevision="Sol;";
	}
	else
	{
		if(data[data.size()-1].pluie)
		{
            repPrevision="Aver;";
		}
		else
		{
			repPrevision="Nua;";
        }
	}

	repPrevision+=String(previValeurTemp);
	repPrevision+=";";
	repPrevision+=String(previValeurHumi);
	repPrevision+=";";
	repPrevision+=String(previValeurViteVent);
	repPrevision+=";";
	repPrevision+=String((int)moyenneDirection);
	repPrevision+=";";
	if (moyennePluie<0.5) {
		repPrevision+="0";
	}
	else
	{
		repPrevision+="1";
	}
	repPrevision+="\n";

    return repPrevision;
}
String PrevisionMeteo::moyenneDirectionToDirection(double moyenneDirect)
{
	String direction;

	if(moyenneDirect<=360 && moyenneDirect>348.5)
	{
		direction = "N";
	}
	if(moyenneDirect<=348.5 && moyenneDirect>326)
	{
		direction = "NNO";
	}
	if(moyenneDirect<=326 && moyenneDirect>303.5)
	{
		direction = "NO";
	}
	if(moyenneDirect<=303.5 && moyenneDirect>281)
	{
		direction = "ONO";
	}
	if(moyenneDirect<=281 && moyenneDirect>258.5)
	{
		direction = "O";
	}
	if(moyenneDirect<=258.5 && moyenneDirect>236)
	{
		direction = "OSO";
	}
	if(moyenneDirect<=236 && moyenneDirect>213.5)
	{
		direction = "SO";
	}
	if(moyenneDirect<=213.5 && moyenneDirect>191)
	{
		direction = "SSO";
	}


	return direction;
}
